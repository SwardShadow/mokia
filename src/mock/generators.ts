import * as utils from './utils'
import { DATE_FORMAT, DATETIME_FORMAT, MAX_INTEGER, POOLS, TIME_FORMAT } from './constants'
import { getMockable } from './mockable'

/**
 * Returns object generated by specified schema
 *
 * @example
 *
 * generate({ name: 'Harrie' })
 * // => { name: 'Harrie' }
 *
 * generate({ name: cname() })
 * // => { name: '张三' }
 *
 * generate(null)
 * // => null
 */
export function generate (mockable: any): any {
  if (typeof mockable === 'function') return mockable()
  if (!utils.isTrueObject(mockable)) return mockable

  const result: any = {}

  for (const key in mockable) {
    if (mockable.hasOwnProperty(key)) {
      const invoker = mockable[key]

      result[key] = typeof invoker === 'function'
        ? invoker.call(result)
        : invoker
    }
  }

  return result
}

/**
 * Returns boolean value
 *
 * @example
 *
 * boolean()
 * // => true / false
 *
 * boolean(1)
 * // => true
 *
 * boolean(1, false)
 * // => false
 */
export function boolean (chance: number = 0.5, value: boolean = true): boolean {
  chance = Math.min(Math.max(chance, 0), 1)

  return Math.random() < chance ? Boolean(value) : !value
}

/**
 * Returns an integer
 *
 * @example
 *
 * integer()
 * // => -MAX_INTEGER ~ MAX_INTEGER
 *
 * integer(100)
 * // => 0 ~ 100
 *
 * integer(100, 200)
 * // => 100 ~ 200
 */
export function integer (max?: number): number
export function integer (min: number, max: number): number
export function integer (n1?: any, n2?: any): number {
  if (n2 === undefined) {
    n2 = utils.ensureInteger(n1, MAX_INTEGER)
    n1 = n1 === undefined ? -MAX_INTEGER : 0
  } else {
    n1 = parseInt(n1, 10)
    n2 = parseInt(n2, 10)
  }

  const min = Math.min(n1, n2)
  const max = Math.max(n1, n2)

  return Math.round(Math.random() * (max - min)) + min
}

/**
 * Returns a natural number
 *
 * @example
 *
 * natural()
 * // => 0 ~ MAX_INTEGER
 *
 * natural(100)
 * // => 0 ~ 100
 *
 * natural(100, 200)
 * // => 100 ~ 200
 */
export function natural (max?: number): number
export function natural (min: number, max: number): number
export function natural (n1?: any, n2?: any): number {
  if (n2 === undefined) {
    n2 = utils.ensureNatural(n1, MAX_INTEGER)
    n1 = 0
  } else {
    n1 = utils.ensureNatural(n1)
    n2 = utils.ensureNatural(n2)
  }

  const min = Math.min(n1, n2)
  const max = Math.max(n1, n2)

  return Math.round(Math.random() * (max - min)) + min
}

/**
 * Returns a float number
 *
 */
export function float (max?: number): number
export function float (min: number, max: number): number
export function float (min: number, max: number, fixed: number): number
export function float (min: number, max: number, dmin: number, dmax: number): number
export function float (n1?: any, n2?: any, n3?: any, n4?: any): number {

  const min = utils.defaultBy(n2, utils.defaultTo(n1, 0), 0)
  const max = utils.defaultTo(n2, utils.defaultTo(n1, 100))
  const dmin = utils.defaultTo(n3, 1)
  const dmax = utils.defaultTo(n4, utils.defaultTo(n3, 3))

  const decLen = integer(dmin, dmax)
  const int = integer(min, max)
  const dec = decLen > 0 ? string(POOLS.number, decLen - 1) + char(POOLS.positive) : ''

  return parseFloat(`${int}.${dec}`)
}

/**
 * Returns a char
 *
 * @example
 *
 * char()
 * // => [any char]
 *
 * char('0123456789')
 * // => [any char from pool]
 */
export function char (pool: string): string {
  return pool.charAt(natural(pool.length - 1))
}

/**
 * Returns a string
 *
 * @example
 *
 * string('abcd')
 * // => baddcdabac
 *
 * string('abcd', 5)
 * // => cadbd
 *
 * string('abcd', 3, 10)
 * // => bdabcc
 */
export function string (pool: string, length?: number): string
export function string (pool: string, min: number, max: number): string
export function string (pool: any, n1?: any, n2?: any): string {
  const max = utils.defaultTo(n2, utils.defaultTo(n1, 10))
  const min = utils.defaultTo(n1, 0)

  const len = natural(min, max)
  let text = ''

  for (let i = 0; i < len; i++) {
    text += char(pool)
  }

  return text
}

/**
 * Returns a word
 *
 * @example
 *
 * word()
 * // => aywivh
 *
 * word(5)
 * // => krqmh
 *
 * word(3, 10)
 * // => rivpau
 */
export function word (length?: number): string
export function word (min: number, max: number): string
export function word (n1?: any, n2?: any): string {
  const max = utils.defaultTo(n2, utils.defaultTo(n1, 8))
  const min = utils.defaultTo(n1, 1)

  return string(POOLS.lower, min, max)
}

/**
 * Returns a title
 *
 * @example
 *
 * title()
 * // => Himgi Krpv Aicgw
 *
 * title(5)
 * // => Ymxgw Qkv Jmy Tlfsun Kiewcg"
 *
 * title(3, 10)
 * // => Pkfqif Hipr Jvsm Oqkkk
 */
export function title (length?: number): string
export function title (min: number, max: number): string
export function title (n1?: any, n2?: any): string {
  const max = utils.defaultTo(n2, utils.defaultTo(n1, 5))
  const min = utils.defaultTo(n1, 1)

  return Array
    .from({ length: integer(min, max) })
    .map(() => utils.capitalize(word()))
    .join(' ')
}

/**
 * Returns a sentence
 *
 * @example
 *
 * sentence()
 * // => Lnoq kfuwmzi pdura.
 *
 * sentence(5)
 * // => Skvp qkfvpd fhre zloqjbn uekgr.
 *
 * sentence(3, 10)
 * // => Vkriw kbuq lgonza wurmg.
 */
export function sentence (length?: number): string
export function sentence (min: number, max: number): string
export function sentence (n1?: any, n2?: any): string {
  const max = utils.defaultTo(n2, utils.defaultTo(n1, 15))
  const min = utils.defaultTo(n1, 5)

  const str = Array
  .from({ length: integer(min, max) })
  .map(() => word())
  .join(' ') + '.'

  return utils.capitalize(str)
}

/**
 * Returns a paragraph
 *
 * @example
 *
 * paragraph()
 * // => xxx. xxx. xxx.
 *
 * paragraph(2)
 * // => xxx. xxx.
 *
 * paragraph(2, 4)
 * // => xxx. xxx.xxx. xxx.
 */
export function paragraph (length?: number): string
export function paragraph (min: number, max: number): string
export function paragraph (n1?: any, n2?: any): string {
  const max = utils.defaultTo(n2, utils.defaultTo(n1, 5))
  const min = utils.defaultTo(n1, 2)

  return Array
    .from({ length: integer(min, max) })
    .map(() => sentence())
    .join(' ')
}

/**
 * Returns a passage
 *
 * @example
 *
 * passage()
 * // => ...\n...\n...
 *
 * passage(2)
 * // => ...\n...\n
 *
 * passage(2, 4)
 * // => ...\n...\n...\n...
 */
export function passage (length?: number): string
export function passage (min: number, max: number): string
export function passage (n1?: any, n2?: any): string {
  const max = utils.defaultTo(n2, utils.defaultTo(n1, 5))
  const min = utils.defaultTo(n1, 2)

  return Array
    .from({ length: integer(min, max) })
    .map(() => paragraph())
    .join('\n')
}

/**
 * Returns a datetime string
 *
 * @example
 *
 * datetime()
 * // => 2007-03-27 18:23:14
 *
 * datetime('YYYY-MM')
 * // => 2001-05
 *
 * datetime('YYYY-MM-DD', '2018-12-31')
 * // => 2014-06-03
 *
 * datetime('YYYY-MM-DD', '2018-12-01', '2018-12-31')
 * // => 2018-12-26
 */
export function datetime (format?: string): string
export function datetime (format: string, max: utils.DateType): string
export function datetime (format: string, min: utils.DateType, max: utils.DateType): string
export function datetime (format?: string, n1?: any, n2?: any): string {
  return utils.formatDate(utils.randomDate(n1, n2), format || DATETIME_FORMAT)
}

/**
 * Returns date string
 */
export function date (format?: string): string
export function date (format: string, max: utils.DateType): string
export function date (format: string, min: utils.DateType, max: utils.DateType): string
export function date (format?: string, min?: any, max?: any): string {
  return datetime(format || DATE_FORMAT, min, max)
}

/**
 * Returns date string
 */
export function time (format?: string): string
export function time (format: string, max: utils.DateType): string
export function time (format: string, min: utils.DateType, max: utils.DateType): string
export function time (format?: string, min?: any, max?: any): string {
  return datetime(format || TIME_FORMAT, min, max)
}

/**
 * Return current datetime string
 */
export function now (format?: string): string {
  return utils.formatDate(new Date(), format || DATETIME_FORMAT)
}

/**
 * Returns an image url
 *
 * @example
 *
 * image()
 * // => http://dummyimage.com/100x100
 *
 * image('64x64')
 * // => http://dummyimage.com/64x64
 */
export function image (size?: string): string
export function image (size: string, text: string): string
export function image (size: string, text: string, background: string): string
export function image (size: string, text: string, background: string, foreground: string): string
export function image (size: string, text: string, background: string, foreground: string, format: 'png' | 'jpg' | 'gif'): string
export function image (...args: any[]): string {
  return utils.createUrlImage(...args)
}

/**
 * Returns a base64 image string
 *
 * @example
 *
 * dataImage()
 * // => data:image/...
 *
 * dataImage('64x64')
 * // => data:image/...
 */
export function dataImage (size?: string): string
export function dataImage (size: string, text: string): string
export function dataImage (size: string, text: string, background: string): string
export function dataImage (size: string, text: string, background: string, foreground: string): string
export function dataImage (size: string, text: string, background: string, foreground: string, format: 'png' | 'jpg' | 'gif'): string
export function dataImage (...args: any[]): string {
  return utils.createBase64Image(...args)
}

/**
 * Returns an array with random length
 *
 * @example
 *
 * array('a')
 * // => ['a']
 *
 * array('a', 3)
 * // => ['a', 'a', 'a']
 *
 * array('a', 3, 5)
 * // => ['a', 'a', 'a', 'a']
 *
 * array({ name: cname() }, 2)
 * // => [{ name: '张三' }, { name: '李四' }]
 */
export function array<T> (proto: T, length?: number): T extends (...args: any[]) => infer R ? R[] : T[]
export function array<T> (proto: T, min: number, max: number): T extends (...args: any[]) => infer R ? R[] : T[]
export function array<T> (proto: T, n1?: number, n2?: number): T extends (...args: any[]) => infer R ? R[] : T[] {
  const max = utils.defaultTo(n2, utils.defaultTo(n1, 5))
  const min = utils.defaultTo(n1, 2)
  const count = integer(min, max)

  const mockable = utils.isFunction(proto) ? proto : getMockable<any>(proto)
  const results: any = []

  for (let i = 0; i < count; i++) {
    results.push(generate(mockable))
  }

  return results
}

/**
 * Returns an item of list
 *
 * @example
 *
 * oneOf(['a', 'b'. 'c'])
 * // => 'b'
 */
export function oneOf<T> (list: T[]): T {
  const index = integer(0, list.length - 1)

  return list[index]
}

/**
 * Returns new list pick from another list
 *
 * @example
 *
 * manyOf(['a', 'b', 'c'])
 * // => ['b', 'c']
 *
 * manyOf(['a', 'b', 'c', 'd', 'e'], 2)
 * // => ['e', 'b']
 *
 * manyOf(['a', 'b', 'c', 'd', 'e'], 2, 5)
 * // => ['c', 'e', 'a']
 */
export function manyOf<T> (list: T[], length?: number): T[]
export function manyOf<T> (list: T[], min: number, max: number): T[]
export function manyOf<T> (list: T[], n1?: number, n2?: number): T[] {
  const max = utils.defaultTo(n2, utils.defaultTo(n1, list.length))
  const min = utils.defaultTo(n1, 0)
  const count = integer(min, max)

  return utils.pickItems(list, count)
}

/**
 * Returns an object with properties picked from another object
 *
 * @example
 *
 * pick({ name: 'Harrie', age: 18, gender: 'male' }, 'name age')
 * // => ({ name: 'Harrie', age: 18 }
 *
 * pick({ name: 'Harrie', age: 18, gender: 'male' }, ['name', 'age'])
 * // => ({ name: 'Harrie', age: 18 }
 *
 * pick({ name: 'Harrie', age: 18, gender: 'male' }, 2)
 * // => ({ age: 18 }
 *
 * pick({ name: 'Harrie', age: 18, gender: 'male' }, 1, 2)
 * // => ({ age: 18, gender: 'male' }
 */
export function pick<T> (proto: T, length?: number): T extends Object ? Partial<T> : null
export function pick<T> (proto: T, props: string | string[]): T extends Object ? Partial<T> : null
export function pick<T> (proto: T, min: number, max: number): T extends Object ? Partial<T> : null
export function pick<T> (proto: T, n1?: any, n2?: any): T extends Object ? Partial<T> : null {
  if (!utils.isTrueObject(proto)) return null as any

  const mockable = getMockable(proto)
  const result = generate(mockable)

  const keys = n1 === undefined || typeof n1 === 'number'
  ? manyOf(Object.keys(result), n1, n2)
  : n1

  return utils.pickProps(result, keys) as any
}
